
bin\Debug\Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000554  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000060  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cd  00000000  00000000  0000069d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b2  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000332  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9f  00000000  00000000  0000214e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000167  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045a  00000000  00000000  00002e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  00003271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  8e:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <InitADC>:
#include <util/delay.h>
#include "passanger.h"

void InitADC()
{
    ADMUX=(1<<REFS0);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  9c:	87 e8       	ldi	r24, 0x87	; 135
  9e:	80 93 7a 00 	sts	0x007A, r24
}
  a2:	08 95       	ret

000000a4 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
    ADMUX&=0Xf8;
  a4:	90 91 7c 00 	lds	r25, 0x007C
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	90 93 7c 00 	sts	0x007C, r25
    ch=ch&0b00000111;
    ADMUX|=ch;
  ae:	90 91 7c 00 	lds	r25, 0x007C
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	89 2b       	or	r24, r25
  b6:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA|=(1<<ADSC);
  ba:	80 91 7a 00 	lds	r24, 0x007A
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
  c4:	80 91 7a 00 	lds	r24, 0x007A
  c8:	84 ff       	sbrs	r24, 4
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <ReadADC+0x20>
    ADCSRA|=(1<<ADIF);
  cc:	80 91 7a 00 	lds	r24, 0x007A
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
  d6:	20 91 78 00 	lds	r18, 0x0078
  da:	30 91 79 00 	lds	r19, 0x0079
}
  de:	c9 01       	movw	r24, r18
  e0:	08 95       	ret

000000e2 <LCD_Command>:
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	28 2f       	mov	r18, r24
  e6:	20 7f       	andi	r18, 0xF0	; 240
  e8:	9f 70       	andi	r25, 0x0F	; 15
  ea:	29 2b       	or	r18, r25
  ec:	25 b9       	out	0x05, r18	; 5
	LCD_Port &= ~ (1<<RS);
  ee:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
  f0:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	92 2f       	mov	r25, r18
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Command+0x14>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  fa:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fc:	e0 e9       	ldi	r30, 0x90	; 144
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Command+0x1e>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 104:	95 b1       	in	r25, 0x05	; 5
 106:	82 95       	swap	r24
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	98 2b       	or	r25, r24
 10e:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);
 110:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Command+0x30>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 116:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	80 ea       	ldi	r24, 0xA0	; 160
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Command+0x3a>
	_delay_ms(2);
}
 120:	08 95       	ret

00000122 <LCD_Char>:

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 122:	95 b1       	in	r25, 0x05	; 5
 124:	28 2f       	mov	r18, r24
 126:	20 7f       	andi	r18, 0xF0	; 240
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	29 2b       	or	r18, r25
 12c:	25 b9       	out	0x05, r18	; 5
	LCD_Port |= (1<<RS);
 12e:	28 9a       	sbi	0x05, 0	; 5
	LCD_Port|= (1<<EN);
 130:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 132:	22 e0       	ldi	r18, 0x02	; 2
 134:	92 2f       	mov	r25, r18
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Char+0x14>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13a:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13c:	e0 e9       	ldi	r30, 0x90	; 144
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_Char+0x1e>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 144:	95 b1       	in	r25, 0x05	; 5
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	98 2b       	or	r25, r24
 14e:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);
 150:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 152:	2a 95       	dec	r18
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Char+0x30>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 156:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 158:	80 ea       	ldi	r24, 0xA0	; 160
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Char+0x3a>
	_delay_ms(2);
}
 160:	08 95       	ret

00000162 <LCD_String>:
	_delay_ms(2);
}


void LCD_String (char *str)
{
 162:	fc 01       	movw	r30, r24
	int i;
	for(i=0;str[i]!=0;i++)
 164:	20 81       	ld	r18, Z
 166:	22 23       	and	r18, r18
 168:	31 f1       	breq	.+76     	; 0x1b6 <LCD_String+0x54>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 16a:	32 e0       	ldi	r19, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16c:	60 e9       	ldi	r22, 0x90	; 144
 16e:	71 e0       	ldi	r23, 0x01	; 1
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 170:	40 ea       	ldi	r20, 0xA0	; 160
 172:	5f e0       	ldi	r21, 0x0F	; 15
 174:	85 b1       	in	r24, 0x05	; 5
 176:	92 2f       	mov	r25, r18
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	98 2b       	or	r25, r24
 17e:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);
 180:	28 9a       	sbi	0x05, 0	; 5
	LCD_Port|= (1<<EN);
 182:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 184:	83 2f       	mov	r24, r19
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_String+0x24>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 18a:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	cb 01       	movw	r24, r22
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_String+0x2c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	22 95       	swap	r18
 196:	20 7f       	andi	r18, 0xF0	; 240
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	28 2b       	or	r18, r24
 19c:	25 b9       	out	0x05, r18	; 5
	LCD_Port |= (1<<EN);
 19e:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1a0:	83 2f       	mov	r24, r19
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_String+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1a6:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	ca 01       	movw	r24, r20
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_String+0x48>


void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1ae:	21 81       	ldd	r18, Z+1	; 0x01
 1b0:	31 96       	adiw	r30, 0x01	; 1
 1b2:	22 23       	and	r18, r18
 1b4:	f9 f6       	brne	.-66     	; 0x174 <LCD_String+0x12>
 1b6:	08 95       	ret

000001b8 <LCD_Clear>:
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 1be:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 1c0:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	89 2f       	mov	r24, r25
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Clear+0xe>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1ca:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	40 e9       	ldi	r20, 0x90	; 144
 1ce:	51 e0       	ldi	r21, 0x01	; 1
 1d0:	fa 01       	movw	r30, r20
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Clear+0x1a>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 1de:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e0:	89 2f       	mov	r24, r25
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_Clear+0x2a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1e6:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	20 ea       	ldi	r18, 0xA0	; 160
 1ea:	3f e0       	ldi	r19, 0x0F	; 15
 1ec:	f9 01       	movw	r30, r18
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Clear+0x36>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 1f2:	f9 01       	movw	r30, r18
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Clear+0x3c>
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 200:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 202:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 204:	89 2f       	mov	r24, r25
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_Clear+0x4e>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 20a:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20c:	fa 01       	movw	r30, r20
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Clear+0x56>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 218:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_Clear+0x62>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 21e:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	c9 01       	movw	r24, r18
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Clear+0x6a>
void LCD_Clear()
{
	LCD_Command (0x01);
	_delay_ms(2);
	LCD_Command (0x80);
}
 226:	08 95       	ret

00000228 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)
{
	LCD_Dir = 0xFF;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	84 b9       	out	0x04, r24	; 4
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	9c e9       	ldi	r25, 0x9C	; 156
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_Init+0x8>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 234:	85 b1       	in	r24, 0x05	; 5
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 23a:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 23c:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	89 2f       	mov	r24, r25
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_Init+0x1a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 246:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 248:	40 e9       	ldi	r20, 0x90	; 144
 24a:	51 e0       	ldi	r21, 0x01	; 1
 24c:	fa 01       	movw	r30, r20
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Init+0x26>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 252:	85 b1       	in	r24, 0x05	; 5
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	80 62       	ori	r24, 0x20	; 32
 258:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 25a:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 25c:	89 2f       	mov	r24, r25
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Init+0x36>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 262:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 264:	20 ea       	ldi	r18, 0xA0	; 160
 266:	3f e0       	ldi	r19, 0x0F	; 15
 268:	f9 01       	movw	r30, r18
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_Init+0x42>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	8f 70       	andi	r24, 0x0F	; 15
 272:	80 62       	ori	r24, 0x20	; 32
 274:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 276:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 278:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27a:	89 2f       	mov	r24, r25
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_Init+0x54>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 280:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 282:	fa 01       	movw	r30, r20
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Init+0x5c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 290:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 292:	89 2f       	mov	r24, r25
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Init+0x6c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 298:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 29a:	f9 01       	movw	r30, r18
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_Init+0x74>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 2a0:	85 b1       	in	r24, 0x05	; 5
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 2a6:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 2a8:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2aa:	89 2f       	mov	r24, r25
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_Init+0x84>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 2b0:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b2:	fa 01       	movw	r30, r20
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Init+0x8c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	80 6c       	ori	r24, 0xC0	; 192
 2be:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 2c0:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c2:	89 2f       	mov	r24, r25
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_Init+0x9c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 2c8:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ca:	f9 01       	movw	r30, r18
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Init+0xa4>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 2d6:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 2d8:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2da:	89 2f       	mov	r24, r25
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_Init+0xb4>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 2e0:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e2:	fa 01       	movw	r30, r20
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_Init+0xbc>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	80 66       	ori	r24, 0x60	; 96
 2ee:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 2f0:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2f2:	89 2f       	mov	r24, r25
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_Init+0xcc>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 2f8:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fa:	f9 01       	movw	r30, r18
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Init+0xd4>
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 300:	85 b1       	in	r24, 0x05	; 5
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 306:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 308:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 30a:	89 2f       	mov	r24, r25
 30c:	8a 95       	dec	r24
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_Init+0xe4>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 310:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 312:	fa 01       	movw	r30, r20
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_Init+0xec>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 318:	85 b1       	in	r24, 0x05	; 5
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 320:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 322:	9a 95       	dec	r25
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_Init+0xfa>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 326:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 328:	c9 01       	movw	r24, r18
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_Init+0x102>
	LCD_Command(0x28);
	LCD_Command(0x0c);
	LCD_Command(0x06);
	LCD_Command(0x01);
	_delay_ms(2);
}
 32e:	c9 01       	movw	r24, r18
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_Init+0x108>
 334:	08 95       	ret

00000336 <LCD_String_xy>:
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)
{
 336:	da 01       	movw	r26, r20
	if (row == 0 && pos<16)
 338:	88 23       	and	r24, r24
 33a:	71 f5       	brne	.+92     	; 0x398 <LCD_String_xy+0x62>
 33c:	60 31       	cpi	r22, 0x10	; 16
 33e:	b4 f1       	brlt	.+108    	; 0x3ac <LCD_String_xy+0x76>


void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 340:	2c 91       	ld	r18, X
 342:	22 23       	and	r18, r18
 344:	09 f4       	brne	.+2      	; 0x348 <LCD_String_xy+0x12>
 346:	52 c0       	rjmp	.+164    	; 0x3ec <LCD_String_xy+0xb6>
 348:	fd 01       	movw	r30, r26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 34a:	32 e0       	ldi	r19, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 34c:	60 e9       	ldi	r22, 0x90	; 144
 34e:	71 e0       	ldi	r23, 0x01	; 1
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 350:	40 ea       	ldi	r20, 0xA0	; 160
 352:	5f e0       	ldi	r21, 0x0F	; 15
 354:	85 b1       	in	r24, 0x05	; 5
 356:	92 2f       	mov	r25, r18
 358:	90 7f       	andi	r25, 0xF0	; 240
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	98 2b       	or	r25, r24
 35e:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);
 360:	28 9a       	sbi	0x05, 0	; 5
	LCD_Port|= (1<<EN);
 362:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 364:	83 2f       	mov	r24, r19
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <LCD_String_xy+0x30>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 36a:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 36c:	cb 01       	movw	r24, r22
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_String_xy+0x38>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 372:	85 b1       	in	r24, 0x05	; 5
 374:	22 95       	swap	r18
 376:	20 7f       	andi	r18, 0xF0	; 240
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	28 2b       	or	r18, r24
 37c:	25 b9       	out	0x05, r18	; 5
	LCD_Port |= (1<<EN);
 37e:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 380:	83 2f       	mov	r24, r19
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_String_xy+0x4c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 386:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 388:	ca 01       	movw	r24, r20
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_String_xy+0x54>


void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 38e:	21 81       	ldd	r18, Z+1	; 0x01
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	22 23       	and	r18, r18
 394:	f9 f6       	brne	.-66     	; 0x354 <LCD_String_xy+0x1e>
 396:	08 95       	ret

void LCD_String_xy (char row, char pos, char *str)
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	91 f6       	brne	.-92     	; 0x340 <LCD_String_xy+0xa>
 39c:	60 31       	cpi	r22, 0x10	; 16
 39e:	84 f6       	brge	.-96     	; 0x340 <LCD_String_xy+0xa>
	LCD_Command((pos & 0x0F)|0xC0);
 3a0:	6f 70       	andi	r22, 0x0F	; 15
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	60 6c       	ori	r22, 0xC0	; 192
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	80 6c       	ori	r24, 0xC0	; 192
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <LCD_String_xy+0x80>
}

void LCD_String_xy (char row, char pos, char *str)
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);
 3ac:	6f 70       	andi	r22, 0x0F	; 15
#define EN PB1


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 3ae:	85 b1       	in	r24, 0x05	; 5
 3b0:	60 68       	ori	r22, 0x80	; 128
 3b2:	8f 70       	andi	r24, 0x0F	; 15
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 3b8:	28 98       	cbi	0x05, 0	; 5
	LCD_Port |= (1<<EN);
 3ba:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	89 2f       	mov	r24, r25
 3c0:	8a 95       	dec	r24
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_String_xy+0x8a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 3c4:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3c6:	e0 e9       	ldi	r30, 0x90	; 144
 3c8:	f1 e0       	ldi	r31, 0x01	; 1
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_String_xy+0x94>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 3ce:	85 b1       	in	r24, 0x05	; 5
 3d0:	62 95       	swap	r22
 3d2:	60 7f       	andi	r22, 0xF0	; 240
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	86 2b       	or	r24, r22
 3d8:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 3da:	29 9a       	sbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3dc:	9a 95       	dec	r25
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_String_xy+0xa6>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 3e0:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e2:	80 ea       	ldi	r24, 0xA0	; 160
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_String_xy+0xb0>
 3ea:	aa cf       	rjmp	.-172    	; 0x340 <LCD_String_xy+0xa>
 3ec:	08 95       	ret

000003ee <main>:
#include <util/delay.h>
#include <string.h>
#include "passanger.h"

int main(void)
{
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	df 93       	push	r29
 3f8:	cf 93       	push	r28
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	2a 97       	sbiw	r28, 0x0a	; 10
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
    LCD_Init();
 40a:	0e 94 14 01 	call	0x228	; 0x228 <LCD_Init>
    InitADC();
 40e:	0e 94 4b 00 	call	0x96	; 0x96 <InitADC>
    uint16_t temp;
    int a;
    char str[10];
    DDRD&=~(1<<PD0);
 412:	50 98       	cbi	0x0a, 0	; 10
    PORTD|=(1<<PD0);
 414:	58 9a       	sbi	0x0b, 0	; 11
    DDRB|=(1<<PB2);
 416:	22 9a       	sbi	0x04, 2	; 4
 418:	7e 01       	movw	r14, r28
 41a:	08 94       	sec
 41c:	e1 1c       	adc	r14, r1
 41e:	f1 1c       	adc	r15, r1
 420:	00 e9       	ldi	r16, 0x90	; 144
 422:	11 e0       	ldi	r17, 0x01	; 1

    while(1)
    {
        if(!(PIND&(1<<PD0)))
 424:	48 9b       	sbis	0x09, 0	; 9
 426:	04 c0       	rjmp	.+8      	; 0x430 <main+0x42>
                LCD_Command(0xC0);
	            LCD_String(str);
                _delay_ms(500);
        }
        else{
            LCD_Clear();
 428:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Clear>
    PORTD|=(1<<PD0);
    DDRB|=(1<<PB2);

    while(1)
    {
        if(!(PIND&(1<<PD0)))
 42c:	48 99       	sbic	0x09, 0	; 9
 42e:	fc cf       	rjmp	.-8      	; 0x428 <main+0x3a>
        {
            temp = ReadADC(0);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 52 00 	call	0xa4	; 0xa4 <ReadADC>
            a = ADC;
 436:	20 91 78 00 	lds	r18, 0x0078
 43a:	30 91 79 00 	lds	r19, 0x0079
            if(a>=0 && a<=200)
 43e:	29 3c       	cpi	r18, 0xC9	; 201
 440:	31 05       	cpc	r19, r1
 442:	08 f4       	brcc	.+2      	; 0x446 <main+0x58>
 444:	3f c0       	rjmp	.+126    	; 0x4c4 <main+0xd6>
                {
                    strcpy(str,"20 Degree");
                    PORTB|=(1<<PB2);
                }
            else if(a>200 && a<=350)
 446:	c9 01       	movw	r24, r18
 448:	89 5c       	subi	r24, 0xC9	; 201
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	86 39       	cpi	r24, 0x96	; 150
 44e:	91 05       	cpc	r25, r1
 450:	08 f4       	brcc	.+2      	; 0x454 <main+0x66>
 452:	42 c0       	rjmp	.+132    	; 0x4d8 <main+0xea>
                {
                    strcpy(str,"23 Degree");
                    PORTB|=(1<<PB2);
                }
            else if(a>350 && a<=500)
 454:	c9 01       	movw	r24, r18
 456:	8f 55       	subi	r24, 0x5F	; 95
 458:	91 40       	sbci	r25, 0x01	; 1
 45a:	86 39       	cpi	r24, 0x96	; 150
 45c:	91 05       	cpc	r25, r1
 45e:	08 f4       	brcc	.+2      	; 0x462 <main+0x74>
 460:	45 c0       	rjmp	.+138    	; 0x4ec <main+0xfe>
                {
                    strcpy(str,"25 Degree");
                    PORTB|=(1<<PB2);
                }
            else if(a>500 && a<=600)
 462:	c9 01       	movw	r24, r18
 464:	85 5f       	subi	r24, 0xF5	; 245
 466:	91 40       	sbci	r25, 0x01	; 1
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	91 05       	cpc	r25, r1
 46c:	08 f4       	brcc	.+2      	; 0x470 <main+0x82>
 46e:	48 c0       	rjmp	.+144    	; 0x500 <main+0x112>
                {
                    strcpy(str,"27 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>600 && a<=700)
 470:	c9 01       	movw	r24, r18
 472:	89 55       	subi	r24, 0x59	; 89
 474:	92 40       	sbci	r25, 0x02	; 2
 476:	84 36       	cpi	r24, 0x64	; 100
 478:	91 05       	cpc	r25, r1
 47a:	08 f4       	brcc	.+2      	; 0x47e <main+0x90>
 47c:	4b c0       	rjmp	.+150    	; 0x514 <main+0x126>
                {
                    strcpy(str,"29 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>700 && a<=850)
 47e:	c9 01       	movw	r24, r18
 480:	8d 5b       	subi	r24, 0xBD	; 189
 482:	92 40       	sbci	r25, 0x02	; 2
 484:	86 39       	cpi	r24, 0x96	; 150
 486:	91 05       	cpc	r25, r1
 488:	08 f4       	brcc	.+2      	; 0x48c <main+0x9e>
 48a:	4e c0       	rjmp	.+156    	; 0x528 <main+0x13a>
                {
                    strcpy(str,"31 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>850 && a<=1024)
 48c:	23 55       	subi	r18, 0x53	; 83
 48e:	33 40       	sbci	r19, 0x03	; 3
 490:	2e 3a       	cpi	r18, 0xAE	; 174
 492:	31 05       	cpc	r19, r1
 494:	08 f4       	brcc	.+2      	; 0x498 <main+0xaa>
 496:	52 c0       	rjmp	.+164    	; 0x53c <main+0x14e>
                    strcpy(str,"33 Degree");
                    PORTB &=~(1<<PB2);
                }


            LCD_String("Temprature");
 498:	86 e4       	ldi	r24, 0x46	; 70
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_String>
                LCD_Command(0xC0);
 4a0:	80 ec       	ldi	r24, 0xC0	; 192
 4a2:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Command>
	            LCD_String(str);
 4a6:	c7 01       	movw	r24, r14
 4a8:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_String>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	c8 01       	movw	r24, r16
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <main+0xc4>
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ba:	83 e1       	ldi	r24, 0x13	; 19
 4bc:	28 38       	cpi	r18, 0x88	; 136
 4be:	38 07       	cpc	r19, r24
 4c0:	b9 f7       	brne	.-18     	; 0x4b0 <main+0xc2>
 4c2:	b0 cf       	rjmp	.-160    	; 0x424 <main+0x36>
        {
            temp = ReadADC(0);
            a = ADC;
            if(a>=0 && a<=200)
                {
                    strcpy(str,"20 Degree");
 4c4:	d7 01       	movw	r26, r14
 4c6:	e0 e0       	ldi	r30, 0x00	; 0
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	01 90       	ld	r0, Z+
 4ce:	0d 92       	st	X+, r0
 4d0:	81 50       	subi	r24, 0x01	; 1
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0xde>
                    PORTB|=(1<<PB2);
                }
            else if(a>350 && a<=500)
                {
                    strcpy(str,"25 Degree");
                    PORTB|=(1<<PB2);
 4d4:	2a 9a       	sbi	0x05, 2	; 5
 4d6:	e0 cf       	rjmp	.-64     	; 0x498 <main+0xaa>
                    strcpy(str,"20 Degree");
                    PORTB|=(1<<PB2);
                }
            else if(a>200 && a<=350)
                {
                    strcpy(str,"23 Degree");
 4d8:	d7 01       	movw	r26, r14
 4da:	ea e0       	ldi	r30, 0x0A	; 10
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	01 90       	ld	r0, Z+
 4e2:	0d 92       	st	X+, r0
 4e4:	81 50       	subi	r24, 0x01	; 1
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <main+0xf2>
                    PORTB|=(1<<PB2);
                }
            else if(a>350 && a<=500)
                {
                    strcpy(str,"25 Degree");
                    PORTB|=(1<<PB2);
 4e8:	2a 9a       	sbi	0x05, 2	; 5
 4ea:	d6 cf       	rjmp	.-84     	; 0x498 <main+0xaa>
                    strcpy(str,"23 Degree");
                    PORTB|=(1<<PB2);
                }
            else if(a>350 && a<=500)
                {
                    strcpy(str,"25 Degree");
 4ec:	d7 01       	movw	r26, r14
 4ee:	e4 e1       	ldi	r30, 0x14	; 20
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	8a e0       	ldi	r24, 0x0A	; 10
 4f4:	01 90       	ld	r0, Z+
 4f6:	0d 92       	st	X+, r0
 4f8:	81 50       	subi	r24, 0x01	; 1
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x106>
                    PORTB|=(1<<PB2);
 4fc:	2a 9a       	sbi	0x05, 2	; 5
 4fe:	cc cf       	rjmp	.-104    	; 0x498 <main+0xaa>
                }
            else if(a>500 && a<=600)
                {
                    strcpy(str,"27 Degree");
 500:	d7 01       	movw	r26, r14
 502:	ee e1       	ldi	r30, 0x1E	; 30
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	01 90       	ld	r0, Z+
 50a:	0d 92       	st	X+, r0
 50c:	81 50       	subi	r24, 0x01	; 1
 50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x11a>
                    PORTB &=~(1<<PB2);
                }
            else if(a>850 && a<=1024)
                {
                    strcpy(str,"33 Degree");
                    PORTB &=~(1<<PB2);
 510:	2a 98       	cbi	0x05, 2	; 5
 512:	c2 cf       	rjmp	.-124    	; 0x498 <main+0xaa>
                    strcpy(str,"27 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>600 && a<=700)
                {
                    strcpy(str,"29 Degree");
 514:	d7 01       	movw	r26, r14
 516:	e8 e2       	ldi	r30, 0x28	; 40
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	01 90       	ld	r0, Z+
 51e:	0d 92       	st	X+, r0
 520:	81 50       	subi	r24, 0x01	; 1
 522:	e1 f7       	brne	.-8      	; 0x51c <main+0x12e>
                    PORTB &=~(1<<PB2);
                }
            else if(a>850 && a<=1024)
                {
                    strcpy(str,"33 Degree");
                    PORTB &=~(1<<PB2);
 524:	2a 98       	cbi	0x05, 2	; 5
 526:	b8 cf       	rjmp	.-144    	; 0x498 <main+0xaa>
                    strcpy(str,"29 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>700 && a<=850)
                {
                    strcpy(str,"31 Degree");
 528:	d7 01       	movw	r26, r14
 52a:	e2 e3       	ldi	r30, 0x32	; 50
 52c:	f1 e0       	ldi	r31, 0x01	; 1
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	01 90       	ld	r0, Z+
 532:	0d 92       	st	X+, r0
 534:	81 50       	subi	r24, 0x01	; 1
 536:	e1 f7       	brne	.-8      	; 0x530 <main+0x142>
                    PORTB &=~(1<<PB2);
                }
            else if(a>850 && a<=1024)
                {
                    strcpy(str,"33 Degree");
                    PORTB &=~(1<<PB2);
 538:	2a 98       	cbi	0x05, 2	; 5
 53a:	ae cf       	rjmp	.-164    	; 0x498 <main+0xaa>
                    strcpy(str,"31 Degree");
                    PORTB &=~(1<<PB2);
                }
            else if(a>850 && a<=1024)
                {
                    strcpy(str,"33 Degree");
 53c:	d7 01       	movw	r26, r14
 53e:	ec e3       	ldi	r30, 0x3C	; 60
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	8a e0       	ldi	r24, 0x0A	; 10
 544:	01 90       	ld	r0, Z+
 546:	0d 92       	st	X+, r0
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	e1 f7       	brne	.-8      	; 0x544 <main+0x156>
                    PORTB &=~(1<<PB2);
 54c:	2a 98       	cbi	0x05, 2	; 5
 54e:	a4 cf       	rjmp	.-184    	; 0x498 <main+0xaa>

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
